name: Seed Problem(s) and Upload Images

on:
  push:
    paths:
      - 'python/problems/**'
      - 'python/images/**'
    branches:
      - main  

jobs:
  detect_changes:
    runs-on: ubuntu-latest
    outputs:
      problem_files_added: ${{ steps.set-env.outputs.problem_files_added }}
      image_files_added: ${{ steps.set-env.outputs.image_files_added }}
      problem_files_paths: ${{ steps.set-env.outputs.problem_files_paths }}
      image_files_paths: ${{ steps.set-env.outputs.image_files_paths }}

    steps:
      - name: Checkout codescript-problems
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect Added Files
        id: set-env
        run: |
          echo "üì• Fetching added files in the current repository..."
          ADDED_FILES=$(git diff --name-only --diff-filter=ACMR ${{ github.event.before }} ${{ github.event.after }})
          echo "$ADDED_FILES"

          # Check for problem files
          PROBLEM_FILES=$(echo "$ADDED_FILES" | grep "^python/problems/" || true)
          if [ -n "$PROBLEM_FILES" ]; then
            echo "problem_files_added=true" >> $GITHUB_OUTPUT
            echo "problem_files_paths=$(echo $PROBLEM_FILES | paste -sd "," -)" >> $GITHUB_OUTPUT
          fi

          # Check for image files
          IMAGE_FILES=$(echo "$ADDED_FILES" | grep "^python/images/" || true)
          if [ -n "$IMAGE_FILES" ]; then
            echo "image_files_added=true" >> $GITHUB_OUTPUT
            echo "image_files_paths=$(echo $IMAGE_FILES | paste -sd "," -)" >> $GITHUB_OUTPUT
          fi

  seed_problems:
    needs: detect_changes
    if: needs.detect_changes.outputs.problem_files_added == 'true'
    runs-on: ubuntu-latest
    env:
      PROBLEM_FILES_PATHS: ${{ needs.detect_changes.outputs.problem_files_paths }}

    steps:
      - name: Checkout codescript-backend
        uses: actions/checkout@v4
        with:
          repository: jjpark987/codescript-backend
          ref: fastapi
          path: ./codescript-fastapi
          fetch-depth: 1

      - name: Checkout codescript-problems
        uses: actions/checkout@v4
        with:
          repository: jjpark987/codescript-problems
          path: ./codescript-problems
          fetch-depth: 1

      - name: Check codescript_network and PROBLEM_FILES_PATHS
        run: |
          docker network inspect codescript_network >/dev/null 2>&1 || docker network create codescript_network
          echo "üìÑ Added problem files:"
          echo "$PROBLEM_FILES_PATHS"

      - name: Run codescript-fastapi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          echo "üöÄ Deploying codescript-fastapi..."
          cd codescript-fastapi
          docker compose up -d
          echo "‚úÖ API docker is running!"

      - name: Run codescript-problems
        run: |
          echo "üöÄ Deploying codescript-problems..."
          cd codescript-problems
          docker compose up --remove-orphans
          echo "‚úÖ Problems docker has completed the script!"

      - name: Clean up codescript-fastapi
        run: |
          echo "üßπ Cleaning up codescript-fastapi..."
          cd codescript-fastapi
          docker compose down --remove-orphans
          echo "‚úÖ Completed clean up!"

  upload_images:
    needs: detect_changes
    if: needs.detect_changes.outputs.image_files_added == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout codescript-problems
        uses: actions/checkout@v4
        with:
          repository: jjpark987/codescript-problems
          path: ./codescript-problems
          fetch-depth: 1

      - name: Check IMAGE_FILES_PATHS
        env:
          IMAGE_FILES_PATHS: ${{ needs.detect_changes.outputs.image_files_paths }}
        run: |
          echo "üìÑ Added images:"
          echo "$IMAGE_FILES_PATHS"
      
      - name: Run upload_images.py
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          GC_BUCKET_NAME: ${{ secrets.GC_BUCKET_NAME }}
        run: |
          echo "üñ•Ô∏è Running script upload_images.py..."
          python ./python/db_scripts/upload_images.py --file "$IMAGE_FILES_PATHS"
          echo "‚úÖ Completed script."
