name: Seed Problem(s)

on:
  push:
    paths:
      - 'python/problems/**'
      - 'python/images/**'
    branches:
      - main  

jobs:
  setup_and_run:
    runs-on: ubuntu-latest

    # services:
    #   db:
    #     image: mysql:8.0
    #     env:
    #       MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
    #       MYSQL_DATABASE: codescript_db
    #     ports:
    #       - 3306:3306

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect Changed Files in Current Repo
        run: |
          echo "Fetching changed files in the current repository..."
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          
          # Filter only relevant changes
          PROBLEM_CHANGED=$(echo "$CHANGED_FILES" | grep "^python/problems/" || true)
          IMAGE_CHANGED=$(echo "$CHANGED_FILES" | grep "^python/images/" || true)

          # Handle problem file changes
          if [ -n "$PROBLEM_CHANGED" ]; then
            echo "PROBLEM_FILES_CHANGED=true" >> $GITHUB_ENV
            echo "Changed problem files:"
            echo "$PROBLEM_CHANGED"
            echo "PROBLEM_FILES_PATHS=$PROBLEM_CHANGED" >> $GITHUB_ENV
          fi

          # Handle image file changes
          if [ -n "$IMAGE_CHANGED" ]; then
            echo "IMAGE_FILES_CHANGED=true" >> $GITHUB_ENV
            echo "Changed image files:"
            echo "$IMAGE_CHANGED"
            echo "IMAGE_FILES_PATHS=$IMAGE_CHANGED" >> $GITHUB_ENV
          fi

      # - name: Run codescript-problems (Problem Seeder Script)
      #   if: env.PROBLEM_FILES_CHANGED == 'true'
      #   run: |
      #     # Loop through all changed problem files
      #     for FILE in $(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep "^python/problems/"); do
      #       echo "Seeding problem file: $FILE"
      #       docker-compose -f repo_b/docker-compose.yml run --rm problem_seeder --file $FILE
      #     done

      # - name: Upload images to Google Cloud Storage
      #   if: env.IMAGE_FILES_CHANGED == 'true'
      #   run: |
      #     echo "Uploading images to Google Cloud Storage..."
      #     gcloud auth activate-service-account --key-file=${{ secrets.GCP_CREDENTIALS }}
      #     gsutil -m cp -r python/images/* gs://YOUR_BUCKET_NAME/images/

#       # Set up codescript-fastapi (FastAPI and MySQL)
#       - name: Set up codescript-fastapi (FastAPI and MySQL)
#         run: |
#           docker-compose -f codescript-fastapi/docker-compose.yml up -d db app
#         env:
#           DATABASE_URL: ${{ secrets.DATABASE_URL }}
#           MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}

#       # Wait for MySQL in codescript-fastapi to be ready
#       - name: Wait for MySQL in codescript-fastapi to be ready
#         run: |
#           docker exec -t codescript-db mysqladmin --user=root --password=${{ secrets.MYSQL_ROOT_PASSWORD }} ping --silent

#       # Run codescript-problems (Problem Seeder Script)
#       - name: Run codescript-problems (Problem Seeder Script)
#         run: |
#           FILE_PATH="${{ github.event.head_commit.modified[0] }}"
#           echo "Problem file path: $FILE_PATH"
#           docker-compose -f repo_b/docker-compose.yml run --rm problem_seeder --file $FILE_PATH

#       # Upload images to Google Cloud if there are changes in the "python/images" folder
#       - name: Upload images to Google Cloud Storage
#         if: contains(github.event.head_commit.modified, 'python/images/')
#         run: |
#           echo "Uploading images to Google Cloud Storage"
#           # Install gcloud CLI
#           curl https://sdk.cloud.google.com | bash
#           source $HOME/google-cloud-sdk/path.bash.inc
#           echo ${{ secrets.GCP_CREDENTIALS }} > ${HOME}/gcp-credentials.json

#           # Authenticate with Google Cloud
#           gcloud auth activate-service-account --key-file=${HOME}/gcp-credentials.json
#           gcloud config set project ace-coda-436023-v0  # Set your project ID
          
#           # Upload images to the Google Cloud Storage bucket
#           gsutil -m cp -r python/images/* gs://YOUR_BUCKET_NAME/images/
          
#       # Clean up codescript-fastapi
#       - name: Clean up codescript-fastapi
#         run: |
#           docker-compose -f repo_a/docker-compose.yml down
